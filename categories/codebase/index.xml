<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>codebase on 实践出真知</title>
    <link>http://wtysos11.github.io/categories/codebase/</link>
    <description>Recent content in codebase on 实践出真知</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Wed, 25 Aug 2021 20:19:18 +0800</lastBuildDate>
    <atom:link href="http://wtysos11.github.io/categories/codebase/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>华为云服务器ubuntu18.04环境下构建k8s多机集群</title>
      <link>http://wtysos11.github.io/posts/20210825_ubuntu%E4%B8%8B%E6%9E%84%E5%BB%BAk8s%E5%A4%9A%E6%9C%BA%E9%9B%86%E7%BE%A4/</link>
      <pubDate>Wed, 25 Aug 2021 20:19:18 +0800</pubDate>
      <guid>http://wtysos11.github.io/posts/20210825_ubuntu%E4%B8%8B%E6%9E%84%E5%BB%BAk8s%E5%A4%9A%E6%9C%BA%E9%9B%86%E7%BE%A4/</guid>
      <description>在华为云买了两台x86的hecs服务器，于是顺便就在ubuntu18.04环境下装了次k8sv1.22.1。由于之前没有考虑可重复性的问题，这次特地重新做了几次确保了一下，方便以后继续重复操作。</description>
    </item>
    <item>
      <title>kubernetes内部访问服务的方式</title>
      <link>http://wtysos11.github.io/posts/20210606_kubernetes%E5%86%85%E9%83%A8%E8%AE%BF%E9%97%AE%E6%9C%8D%E5%8A%A1%E7%9A%84%E6%96%B9%E5%BC%8F/</link>
      <pubDate>Sun, 06 Jun 2021 16:23:14 +0800</pubDate>
      <guid>http://wtysos11.github.io/posts/20210606_kubernetes%E5%86%85%E9%83%A8%E8%AE%BF%E9%97%AE%E6%9C%8D%E5%8A%A1%E7%9A%84%E6%96%B9%E5%BC%8F/</guid>
      <description>最近因为实验室集群整体爆炸，需要修改旧服务器的网络配置。为此，需要进行一系列的网络测试。同时，这也是一个新的label系列。总是有一些代码，非常常用，但是用的时候就是找不到，想也想不起来，就非得去查。很难受。&#xA;之前做网络测试的手段太原始了（指新建ubuntu容器后登陆进去），不够灵活方便，而且也找不到代码和镜像了。为此，我总结了几个比较好的快速访问方式&#xA;方式1 Link to heading 最直接的方式肯定是登陆进服务内部，比如istio中提到的&#xA;在执行命令后：kubectl apply -f samples/bookinfo/platform/kube/bookinfo.yaml，如果此时所有的svc和pods都跑起来了，可以通过运行kubectl exec -it $(kubectl get pod -l app=ratings -o jsonpath=&#39;{.items[0].metadata.name}&#39;) -c ratings -- curl productpage:9080/productpage | grep -o &amp;quot;&amp;lt;title&amp;gt;.*&amp;lt;/title&amp;gt;&amp;quot;来检测到结果。&#xA;其中的kubectl exec -it可以登陆容器并打开控制台，而服务的名称由$(kubectl get pod -l app=ratings -o jsonpath=&#39;{.items[0].metadata.name}&#39;)，-c参数保证了在存在注入的情况下能正常运行。&#xA;--连接两条不同的命令，后面就不需要过多的解释了。&#xA;甚至不一定是同一个镜像，比如使用sleep镜像进行（足够小）&#xA;export SLEEP_POD=$(kubectl get pod -l app=sleep -o jsonpath={.items..metadata.name})#这里要自行加上-n=test kubectl exec -it $SLEEP_POD -c sleep curl http://ratings.default.svc.cluster.local:9080/ratings/1 {&amp;#34;id&amp;#34;:1,&amp;#34;ratings&amp;#34;:{&amp;#34;Reviewer1&amp;#34;:5,&amp;#34;Reviewer2&amp;#34;:4}} 方式2 Link to heading 临时开一个curl镜像进行网络检查&#xA;官方在httpbin里也展示了如何通过curl镜像来进行内网测试(同样，注意命名空间)&#xA;kubectl run -i --rm --restart=Never dummy --image=dockerqa/curl:ubuntu-trusty --command -- curl --silent httpbin:8000/html kubectl run -i --rm --restart=Never dummy --image=dockerqa/curl:ubuntu-trusty --command -- curl --silent --head httpbin:8000/status/500 time kubectl run -i --rm --restart=Never dummy --image=dockerqa/curl:ubuntu-trusty --command -- curl --silent httpbin:8000/delay/5 网络测试的对象 Link to heading 我一开始想用hello来做，但是其实挺不好的，没什么代表性。 echo-server这个就很不错，像是一个回音壁一样，将所有的请求全部打回。 docker pull ealen/echo-server</description>
    </item>
  </channel>
</rss>
