<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>算法 on 实践出真知</title>
    <link>http://wtysos11.github.io/categories/%E7%AE%97%E6%B3%95/</link>
    <description>Recent content in 算法 on 实践出真知</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Sun, 21 Jan 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://wtysos11.github.io/categories/%E7%AE%97%E6%B3%95/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>置顶：博客文章组织，目录与标签</title>
      <link>http://wtysos11.github.io/posts/%E7%BD%AE%E9%A1%B6/</link>
      <pubDate>Wed, 06 Apr 2022 12:34:02 +0800</pubDate>
      <guid>http://wtysos11.github.io/posts/%E7%BD%AE%E9%A1%B6/</guid>
      <description>介绍本博客的文章是如何组织的，以及对应的标签和目录的意思介绍</description>
    </item>
    <item>
      <title>统计序列中的逆序对</title>
      <link>http://wtysos11.github.io/posts/20210317_%E7%BB%9F%E8%AE%A1%E5%BA%8F%E5%88%97%E4%B8%AD%E7%9A%84%E9%80%86%E5%BA%8F%E5%AF%B9/</link>
      <pubDate>Wed, 17 Mar 2021 20:07:14 +0800</pubDate>
      <guid>http://wtysos11.github.io/posts/20210317_%E7%BB%9F%E8%AE%A1%E5%BA%8F%E5%88%97%E4%B8%AD%E7%9A%84%E9%80%86%E5%BA%8F%E5%AF%B9/</guid>
      <description>因为好像做过这个题目，所以稍微提一下。最简单的方式就是归并排序 题解 方法分别是归并排序和树状数组。&#xA;归并排序 Link to heading 代码来源：https://blog.csdn.net/afei__/article/details/82951905 我觉得这个写的好一些。并且官方题解里面是写反的，我一开始还看了半天。&#xA;public class Main { public static void main(String[] args) { int[] arr = new int[] { 2, 3, 8, 6, 1 }; int inversionCount = mergeSort(arr, 0, arr.length); printArray(arr); System.out.println(&amp;#34;inversionCount: &amp;#34; + inversionCount); } public static int mergeSort(int[] arr, int start, int end) { int inversionCount = 0; int length = end - start; if (length &amp;gt; 1) { // 长度大于1才需要排序 int mid = (start + end) / 2; inversionCount += mergeSort(arr, start, mid); // sort left inversionCount += mergeSort(arr, mid, end); // sort right inversionCount += merge(arr, start, mid, end); } return inversionCount; } public static int merge(int[] arr, int start, int mid, int end) { // check input if (arr == null || start &amp;lt; 0 || end &amp;gt; arr.</description>
    </item>
    <item>
      <title>树状数组、线段树与RMQ</title>
      <link>http://wtysos11.github.io/posts/20210317_%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84%E7%BA%BF%E6%AE%B5%E6%A0%91%E4%B8%8Ermq/</link>
      <pubDate>Wed, 17 Mar 2021 19:57:14 +0800</pubDate>
      <guid>http://wtysos11.github.io/posts/20210317_%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84%E7%BA%BF%E6%AE%B5%E6%A0%91%E4%B8%8Ermq/</guid>
      <description>区间修改问题常用的三种手段，我觉得还是有必要复习一下。&#xA;树状数组 Link to heading binary index tree 来自OI-wiki的图，我记得刘汝佳书里也有，不过那本书不在我手边 树状数组的核心是lowbit：x&amp;amp;(-x)，其中-x为x的负数的补码表示形式，计算出来可以得到x的二进制从右往左的第一个1所对应的十进制数字。 这样就可以算出非叶子节点对应的管辖范围&#xA;单点修改，一路上山&#xA;int tree[MAXN]; inline void update(int i, int x) { for (int pos = i; pos &amp;lt; MAXN; pos += lowbit(pos)) tree[pos] += x; } 求前n项和，一路下山&#xA;inline int query(int n) { int ans = 0; for (int pos = n; pos; pos -= lowbit(pos)) ans += tree[pos]; return ans; } 区间查询&#xA;inline int query(int a, int b) { return query(b) - query(a - 1); } 举个例子，查询前6个的和，lowbit(6) =2 ，所以S[6] = c[6]+c[4]，这是比较自然的。 更新的时候，如果要更新6的话，需要更新c[6]和c[8]的值。 唯一的问题就是需要多加理解，二进制表示毕竟不够直观。但是原题目是很简单的。</description>
    </item>
    <item>
      <title>全排列问题与康托编码</title>
      <link>http://wtysos11.github.io/posts/20210317_%E5%85%A8%E6%8E%92%E5%88%97%E9%97%AE%E9%A2%98%E4%B8%8E%E5%BA%B7%E6%89%98%E7%BC%96%E7%A0%81/</link>
      <pubDate>Mon, 15 Mar 2021 08:57:14 +0800</pubDate>
      <guid>http://wtysos11.github.io/posts/20210317_%E5%85%A8%E6%8E%92%E5%88%97%E9%97%AE%E9%A2%98%E4%B8%8E%E5%BA%B7%E6%89%98%E7%BC%96%E7%A0%81/</guid>
      <description>leetocde的permutation-sequence问题 使用康托编码可以在O(n)是时间内求解。&#xA;题目采用康托编码的思路。其实就是康托展开的逆过程。康托展开用来求某个全排列数是第几小的数，也就是当这些数按顺序排时第几个数。&#xA;康托展开 Link to heading 过程如下：比如求321 是 第几小的，可以这样来想：小于3的数有1和2 两个，首位确定之后后面两位有2！中情况，所以共有2*2！=4种。&#xA;小于2的数只有一个1，所以有11！=1种情况，最后一位是1，没有比一小的数，所以是00！=0&#xA;综上：小于321的数有4+1=5个，所以321是第六小的数。&#xA;反例与进一步思考 Link to heading 但是康托展开没有这么简单，其实是挺复杂的。以n=4的情况为例子，我们已经知道3412是第17个，也就是说有16个比它小的数字。 首位确定后，有23！=12种，这个是符合的 但是第二位的话是4，此时是先考虑小于4的情况，有1、2、3，然后再排除掉3，所以是22!=4； 第三位的话是1，此时不存在比它小的数字，所以直接排除 最后一位是2，但是枚举发现1已经计算过了，所以也排除。 最终结果是12+4=16，结果正确。虽然思路大体上是一样的，但是原文是没有筛查这个过程的，其实还是有点麻烦的，可能需要开一个集合或者专门的数据结构来进行判断。&#xA;康托编码 Link to heading 康托展开的逆过程就是已知这个数是第k个数，求这个数是多少，当然是知道n的值的。&#xA;第k个数就是有k-1个数比这个数小。&#xA;所以就是 k-1=an*(n-1)!+an-1*(n-2)!+&amp;hellip;.+a1*0!;&#xA;再举一个例子：&#xA;如何找出第16个（按字典序的）{1,2,3,4,5}的全排列？&#xA;首先用16-1得到15&#xA;用15去除4! 得到0余15&#xA;用15去除3! 得到2余3&#xA;用3去除2! 得到1余1&#xA;用1去除1! 得到1余0&#xA;有0个数比它小的数是1，所以第一位是1&#xA;有2个数比它小的数是3，但1已经在之前出现过了所以是4&#xA;有1个数比它小的数是2，但1已经在之前出现过了所以是3&#xA;有1个数比它小的数是2，但1,3,4都出现过了所以是5&#xA;最后一个数只能是2&#xA;代码如下。写的真的挺好，我第一眼还没想明白&#xA;class Solution { public: //全排列元素数量为n，返回第k个排列 string getPermutation(int n, int k) { string s(n,&amp;#39;0&amp;#39;);//初始是n个零 string result; for(int i=0;i&amp;lt;n;i++) { s[i]+=i+1;//生成默认序列,1-&amp;gt;n } return kth_permutation(s,k); } private: int factorial(int n)//返回阶乘。其实我觉得这个阶乘可以带个缓存，不过不带也可以了 { int result=1; for(int i=1;i&amp;lt;=n;i++) { result*=i; } return result; } string kth_permutation(string &amp;amp;s,int k) { const int n=s.</description>
    </item>
    <item>
      <title>图的存储方式之前向星与邻接表</title>
      <link>http://wtysos11.github.io/posts/20210315_%E5%9B%BE%E7%9A%84%E5%AD%98%E5%82%A8%E6%96%B9%E5%BC%8F%E4%B9%8B%E5%89%8D%E5%90%91%E6%98%9F%E4%B8%8E%E9%82%BB%E6%8E%A5%E8%A1%A8/</link>
      <pubDate>Mon, 15 Mar 2021 08:57:14 +0800</pubDate>
      <guid>http://wtysos11.github.io/posts/20210315_%E5%9B%BE%E7%9A%84%E5%AD%98%E5%82%A8%E6%96%B9%E5%BC%8F%E4%B9%8B%E5%89%8D%E5%90%91%E6%98%9F%E4%B8%8E%E9%82%BB%E6%8E%A5%E8%A1%A8/</guid>
      <description>常用的邻接矩阵和邻接表都挺简单的，就不提了。 这个是ACM版本的前向星，本质就是用数组替换了链表，效果就是更方便一些。 虽然不如十字链表删除方便，但是也能比较方便地写出边删除的操作。&#xA;//前向星 struct graph{ typedef vector&amp;lt;int&amp;gt; VI; VI info,next,to; //假设现在有n个点，m条边,info长度为n，next和to长度为m。 //其中，info保存着所有节点的第一个边 //next保存着所有边信息的下一个边 //to保存着边的下一个节点信息。如果是带权边，可以增加一个weights数组，与to类似。（所有边增加主要加的是to） graph(int n=0,int m=0):to(0),next(0){ info.resize(n); next.reserve(m); to.reserve(m); } int edge_size(){ return to.size();//显然，to即保存了所有边的信息 } int vertex_size(){ return info.size();//info保存了所有节点的信息 } void expand(int i){ if(info.size()&amp;lt;i+1) info.resize(i+1); } void add(int i,int j){//添加一条从i到j的边，有向 expand(i),expand(j); to.push_back(j);//压入新边的信息 next.push_back(info[i]);//新头的下一个指向原来的指针 info[i] = to.size()-1;//链表头指针指向新加项目 } void del_back(){ for(int i=0;i&amp;lt;info.size();i++){ if(info[i] == to.size()-1){ info[i] = next.back(); break; } } to.pop_back(); next.pop_back(); } void clear(){ info.clear(); next.resize(0); to.resize(0); } }; 想了一下还是提一下邻接表吧</description>
    </item>
    <item>
      <title>【算法-字节笔试-中等难度】Tarjan算法求解公共祖先问题LCA，并介绍倍增算法</title>
      <link>http://wtysos11.github.io/posts/20210314_%E5%AD%97%E8%8A%82%E7%AC%94%E8%AF%95_tarjan%E7%AE%97%E6%B3%95%E6%B1%82%E8%A7%A3%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88%E9%97%AE%E9%A2%98lca%E4%B8%8E%E5%80%8D%E5%A2%9E/</link>
      <pubDate>Sun, 14 Mar 2021 14:08:14 +0800</pubDate>
      <guid>http://wtysos11.github.io/posts/20210314_%E5%AD%97%E8%8A%82%E7%AC%94%E8%AF%95_tarjan%E7%AE%97%E6%B3%95%E6%B1%82%E8%A7%A3%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88%E9%97%AE%E9%A2%98lca%E4%B8%8E%E5%80%8D%E5%A2%9E/</guid>
      <description>今天字节笔试的第二题，详情由于保密协议不能上网，但是大意就是给一大堆节点，去求LCA。递归直接爆栈，用stack写递归有一个点，改进优化了一下有两个点…… 我印象中这个算法挺简单的，就搜了一下，果然找到了。不是，现在校招算法题都这么丧病了吗。 由于保密协议，不能放代码。后面放Tarjan算法学习笔记。&#xA;LCA问题参考资料， Tarjan的时间复杂度为O((n+q)× 并查集的复杂度 )，而使用路径压缩和按秩合并的并查集复杂度为O(Alpha(n))。所以作为离线算法，Tarjan比倍增算法快很多。 但作为在线算法，倍增算法能实时得到解法。 RMQ&#xA;复杂度介绍：&#xA;Tarjan的复杂度为O(n+q) RMQ预处理为O(nlogn)，查询O(1) 倍增算法复杂度为O((n+q)logn) 参考资料：&#xA;Tarjan求解LCA，非常好的教学，很详细地列举了LCA的步骤。关键是有图，有逐步分解的图，非常好。 伪代码 Link to heading Tarjan(u)//marge和find为并查集合并函数和查找函数 { for each(u,v) //访问所有u子节点v { Tarjan(v); //继续往下遍历 marge(u,v); //合并v到u上 标记v被访问过; } for each(u,e) //访问所有和u有询问关系的e { 如果e被访问过; u,e的最近公共祖先为find(e); } } 具体实现代码 Link to heading #include &amp;lt;iostream&amp;gt; #include &amp;lt;vector&amp;gt; #include &amp;lt;utility&amp;gt; using namespace std; int N = 5; vector&amp;lt;vector&amp;lt;int&amp;gt; &amp;gt; lib;//假设lib为二维动态数组，lib[i]表示节点i的所有孩子vector vector&amp;lt;int&amp;gt; parent(N,0);//并查集数组 vector&amp;lt;bool&amp;gt; isVisited(N,false); vector&amp;lt;vector&amp;lt;int&amp;gt; &amp;gt; query;//query关系，双向的 int find(int e){ if(parent[e] !</description>
    </item>
    <item>
      <title>【字节笔试，算法-简单-&gt;困难】leetcode 1529灯泡开关 &#43; POJ 1830开关问题，从搜索到高斯消元法</title>
      <link>http://wtysos11.github.io/posts/20210314_%E5%AD%97%E8%8A%82%E7%AC%94%E8%AF%95_%E5%BC%80%E5%85%B3%E9%97%AE%E9%A2%98/</link>
      <pubDate>Sun, 14 Mar 2021 14:08:14 +0800</pubDate>
      <guid>http://wtysos11.github.io/posts/20210314_%E5%AD%97%E8%8A%82%E7%AC%94%E8%AF%95_%E5%BC%80%E5%85%B3%E9%97%AE%E9%A2%98/</guid>
      <description>字节笔试题，原题忘记了，但是稍微有些区别&#xA;题目 大致意思就是反转。 实现核心就是利用亮点：&#xA;开关本身顺序对结果没有影响 所有的1都由翻转本身得到。 class Solution { public: int minFlips(string target) { //时序无关性，因此所有的1都是反转得到的 //从头开始枚举1。字符串不翻转，反转自身 int number = 0; bool flag = true;//true，看1则翻转；false，看0则翻转 for(int i =0;i&amp;lt;target.length();i++){ if(flag &amp;amp;&amp;amp; target[i]==&amp;#39;1&amp;#39;){ flag = !flag; number++; }else if(!flag &amp;amp;&amp;amp; target[i]==&amp;#39;0&amp;#39;){ flag = !flag; number++; } } return number; } }; 扩展问题是今天碰到的字节笔试的第三题，给定一个长度为n的环状数组，按动一次开关可以改变自己和左右的状态（0-&amp;gt;1/1-&amp;gt;0）。初始全部为0，问如何得到1。 这个问题比较类似POJ1830，相当于自动加上了开关变化的限制。&#xA;题目类型说明： 这道题目居然是道异或方程组的高斯消元问题。 核心原理倒是不难，现在有原状态b0和目标状态b1，就可以得到状态改变量b 例如对于原始例子而言，b_0=[0,0,0,0]，b_1=[1,1,1,1]，则b = b_0^b_1=[1,1,1,1]，其中b[i]表示第i个灯的状态&#xA;整个问题可以建模成A*x=b，其中A矩阵为开关i与j之间的影响，A[i][j]=1表示开关j会对开关i产生影响。x向量表示开关i的操作，1表示开，0表示关。 显然，x[i]对应在A矩阵中为第j列，x[i]=1时第j列被激活，以字节拿到题目为例，相当于A[j][j]=A[j-1][j]=A[j+1][j]=1，一旦j列被激活就会对周围和自己产生影响。 将A转化为分块矩阵A=[a1,a2,...,an]，则变为一个异或方程组的消元问题，使用高斯消元法即可求解。&#xA;POJ1830代码 高斯消元部分原理&#xA;线性方程组写成增广矩阵形式 找主元，对增广矩阵进行行行变换；对元素，在第i列中及以下选取绝对值最大的元素，将所有元素中最大的所在的行与第i行进行交换. 消元，采用高斯消元法使得新得到的第i行以下的元素均为零 重复上述过程，直到得到下三角阵 对上三角阵回代求解。 具体描述普通高斯消元伪代码 Link to heading 给定N行N+1列的增广矩阵aug 第一步、循环，i从0-&amp;gt;N-1，枚举主元 1.</description>
    </item>
    <item>
      <title>【动态规划】最长公共子串问题</title>
      <link>http://wtysos11.github.io/posts/20210311_%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%AD%90%E4%B8%B2%E9%97%AE%E9%A2%98/</link>
      <pubDate>Thu, 11 Mar 2021 16:40:14 +0800</pubDate>
      <guid>http://wtysos11.github.io/posts/20210311_%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%AD%90%E4%B8%B2%E9%97%AE%E9%A2%98/</guid>
      <description>题目来源为：牛客网&#xA;题目有意思的地方在于，最长公共子串与最长连续公共子串都是比较经典的问题，但是这道题在其基础上加了限制。 首先这道题应该是最长连续公共子串问题，状态转移方程就不写了，挺简单的。就记录下最大的子串所在的位置的行坐标和列坐标，就能把子串拿到手。 但是对于O(nm)的动态规划所有点都会超时，这就很厉害了，目前通过的做法使用的是滑动窗口法，我还在研究。&#xA;代码大概长这样&#xA;/** * 滑动窗口算法 * * @param str1 string字符串 the string * @param str2 string字符串 the string * @return string字符串 */ public static String LCS1(String str1, String str2) { // write code here StringBuilder sb = new StringBuilder(); int start = 0, end = 1; while (end &amp;lt; str1.length() + 1) { if (str2.contains(str1.substring(start, end))) { if (sb.length() &amp;lt; end - start) { sb.delete(0, sb.length()); sb.append(str1, start, end); } } else { //这个算法我曾经疑惑，假如出现start&amp;gt;end，程序不是会crash么 //通过debug发现，当start==end时，substring获取的是&amp;#34;&amp;#34;，此时contains必然为true //所以当start == end时，必然会走end++分支 start++; } end++; } if (sb.</description>
    </item>
    <item>
      <title>KMP算法复习</title>
      <link>http://wtysos11.github.io/posts/20210311_kmp%E7%AE%97%E6%B3%95%E5%A4%8D%E4%B9%A0/</link>
      <pubDate>Thu, 11 Mar 2021 15:09:14 +0800</pubDate>
      <guid>http://wtysos11.github.io/posts/20210311_kmp%E7%AE%97%E6%B3%95%E5%A4%8D%E4%B9%A0/</guid>
      <description>太久没打了，刚好有道题用上了，就复习一下。 我觉得复到KMP应该就够用了，如果要AC自动机我直接死在那里。&#xA;参考资料 如何更好地理解和掌握 KMP 算法? - 阮行止的回答 - 知乎 https://www.zhihu.com/question/21923021/answer/1032665486&#xA;核心思想 Link to heading KMP算法要解决的问题是字符串匹配问题。给定原串S和模版串P，求解原串中是否存在子字符串与模版串相匹配。&#xA;最简单的想法就是暴力搜索，设原串S长度为n，模板串P长度为m，显然暴力的时间复杂度为O(nm)，非常慢。&#xA;KMP的想法是充分利用适配信息，其next数组的定义如下：next[i]表示在P[0:i]子串中，使前k个字符恰好等于后k个字符的最大的k，且k不能等于i+1（否则就等于它自己了） 这个数组的定义挺绕的，第一眼基本都不会反应过来，我就不插图了，只用文本表述一下（建议看图）。KMP的失配匹配，本质上就是把模版串向前伸，直到伸到前缀与后缀匹配为止，这实际上就是自己与自己匹配。因此这个k就是前缀与后缀相同的最大长度k。&#xA;因此next数组可以用如下方法求得&#xA;def getNxt(x): for i in range(x,0,-1): if p[0:i] == p[x-i+1:x+1]: return i return 0 nxt = [getNxt(x) for x in range(len(p))] 构建next数组的复杂度显然是O(m^2)的 使用next数组加速匹配&#xA;def search(p,s): tar = 0 # 主串中将要匹配的位置 pos = 0 # 子串中将要匹配的位置 while tar &amp;lt; len(s): if s[tar] == p[pos]: # 若两个字符相同，匹配成功，tar和pos各进一步 tar += 1 pos += 1 elif pos&amp;gt;0: # 失配，且pos&amp;gt;0，则next数组移动 pos = nxt[pos-1] else: # pos[0]也失配了，则主串前进 tar += 1 if pos == len(p): # pos走到了len(p)，匹配成功 print(tar-pos) # 输出起始地点 pos = nxt[pos-1] # 当作失配，继续下一次匹配 时间复杂度为O(n+m)，会比暴力方法小很多。</description>
    </item>
    <item>
      <title>微信面试算法题-最长拼接子序列</title>
      <link>http://wtysos11.github.io/posts/20210310_%E6%9C%80%E9%95%BF%E6%8B%BC%E6%8E%A5%E5%AD%90%E5%BA%8F%E5%88%97/</link>
      <pubDate>Wed, 10 Mar 2021 14:21:14 +0800</pubDate>
      <guid>http://wtysos11.github.io/posts/20210310_%E6%9C%80%E9%95%BF%E6%8B%BC%E6%8E%A5%E5%AD%90%E5%BA%8F%E5%88%97/</guid>
      <description>面的微信部门，应用研发岗实习一面。我人都傻了，我填的不都是java研发之类的，怎么冒出个这么奇怪的岗位。&#xA;题目是这样子的：对于一个给定的子序列，比如说[1,2,3,10,4,2,5,6]，要求去除一段连续的数据，使得剩下的数据是非下降的。输出的结果是去除的最少数字的数量。（可以不唯一）&#xA;比如说对于上面这个序列，显然其去除的可以是10,4,2，也就是输出3。也可以选择去除3,10,4，结果也是相同的。&#xA;这道题是我面试腾讯微信部门的第二道面试题，感谢面试官给了我充足的时间，虽然我还是没有做出来QAQ。&#xA;当时的想法 Link to heading 提到这种上升或下降式的序列，第一个想到的就是最长连续上升子序列之类的题目，就想到用DP来做。然后发现一个很尴尬的问题：状态转移方程建不出来^_^。这个真的是从做DP到现在一直困扰我的梦靥了，那就没办法了。不排除能用DP做，只是我比较菜，有时间专门研究一下吧……&#xA;第二个想法就是观察原序列。显然，被去除掉的结构一定是存在逆序的，就是说索引顺序与值顺序不一致，比如10,4这样。那有一个想法，如果我用递归的思想，不断二分原序列，将其拆解到只剩下两个数字。然后对于小的逆序对，删除掉大的。再对其拼接的过程中不断去除逆序结构，最终应该会剩下多条顺序链。&#xA;但是在如何拼接顺序链以及确认该步骤是正确的地方上卡住了。&#xA;现在的想法 Link to heading 考完出来之后我就有了个新的想法。由于只能切一刀，显然只有三种情况：把前面部分切掉，只保留后面部分；把后面部分切掉，只保留前面部分；以及中间切一刀，保留两边部分。&#xA;无论怎么切，都可以用归纳法证明，剩下的一定是一条连续非下降子序列。所以问题转变为：求解以头开始或者以尾结束的最长连续子序列的长度，然后尝试把它们拼接起来。&#xA;算法正确性证明我忘了，好久没干了，不过感觉这个靠谱多了。</description>
    </item>
  </channel>
</rss>
