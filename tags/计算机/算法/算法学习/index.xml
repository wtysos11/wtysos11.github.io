<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>计算机/算法/算法学习 on 实践出真知</title>
    <link>http://wtysos11.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA/%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/</link>
    <description>Recent content in 计算机/算法/算法学习 on 实践出真知</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <atom:link href="http://wtysos11.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA/%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>树状数组、线段树与RMQ</title>
      <link>http://wtysos11.github.io/posts/20210317_%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84%E7%BA%BF%E6%AE%B5%E6%A0%91%E4%B8%8Ermq/</link>
      <pubDate>Wed, 17 Mar 2021 19:57:14 +0800</pubDate>
      <guid>http://wtysos11.github.io/posts/20210317_%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84%E7%BA%BF%E6%AE%B5%E6%A0%91%E4%B8%8Ermq/</guid>
      <description>区间修改问题常用的三种手段，我觉得还是有必要复习一下。&#xA;树状数组 Link to heading binary index tree 来自OI-wiki的图，我记得刘汝佳书里也有，不过那本书不在我手边 树状数组的核心是lowbit：x&amp;amp;(-x)，其中-x为x的负数的补码表示形式，计算出来可以得到x的二进制从右往左的第一个1所对应的十进制数字。 这样就可以算出非叶子节点对应的管辖范围&#xA;单点修改，一路上山&#xA;int tree[MAXN]; inline void update(int i, int x) { for (int pos = i; pos &amp;lt; MAXN; pos += lowbit(pos)) tree[pos] += x; } 求前n项和，一路下山&#xA;inline int query(int n) { int ans = 0; for (int pos = n; pos; pos -= lowbit(pos)) ans += tree[pos]; return ans; } 区间查询&#xA;inline int query(int a, int b) { return query(b) - query(a - 1); } 举个例子，查询前6个的和，lowbit(6) =2 ，所以S[6] = c[6]+c[4]，这是比较自然的。 更新的时候，如果要更新6的话，需要更新c[6]和c[8]的值。 唯一的问题就是需要多加理解，二进制表示毕竟不够直观。但是原题目是很简单的。</description>
    </item>
    <item>
      <title>树状数组、线段树与RMQ</title>
      <link>http://wtysos11.github.io/posts/20210317_%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84%E7%BA%BF%E6%AE%B5%E6%A0%91%E4%B8%8Ermq/</link>
      <pubDate>Wed, 17 Mar 2021 19:57:14 +0800</pubDate>
      <guid>http://wtysos11.github.io/posts/20210317_%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84%E7%BA%BF%E6%AE%B5%E6%A0%91%E4%B8%8Ermq/</guid>
      <description>区间修改问题常用的三种手段，我觉得还是有必要复习一下。&#xA;树状数组 Link to heading binary index tree 来自OI-wiki的图，我记得刘汝佳书里也有，不过那本书不在我手边 树状数组的核心是lowbit：x&amp;amp;(-x)，其中-x为x的负数的补码表示形式，计算出来可以得到x的二进制从右往左的第一个1所对应的十进制数字。 这样就可以算出非叶子节点对应的管辖范围&#xA;单点修改，一路上山&#xA;int tree[MAXN]; inline void update(int i, int x) { for (int pos = i; pos &amp;lt; MAXN; pos += lowbit(pos)) tree[pos] += x; } 求前n项和，一路下山&#xA;inline int query(int n) { int ans = 0; for (int pos = n; pos; pos -= lowbit(pos)) ans += tree[pos]; return ans; } 区间查询&#xA;inline int query(int a, int b) { return query(b) - query(a - 1); } 举个例子，查询前6个的和，lowbit(6) =2 ，所以S[6] = c[6]+c[4]，这是比较自然的。 更新的时候，如果要更新6的话，需要更新c[6]和c[8]的值。 唯一的问题就是需要多加理解，二进制表示毕竟不够直观。但是原题目是很简单的。</description>
    </item>
    <item>
      <title>树状数组、线段树与RMQ</title>
      <link>http://wtysos11.github.io/posts/20210317_%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84%E7%BA%BF%E6%AE%B5%E6%A0%91%E4%B8%8Ermq/</link>
      <pubDate>Wed, 17 Mar 2021 19:57:14 +0800</pubDate>
      <guid>http://wtysos11.github.io/posts/20210317_%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84%E7%BA%BF%E6%AE%B5%E6%A0%91%E4%B8%8Ermq/</guid>
      <description>区间修改问题常用的三种手段，我觉得还是有必要复习一下。&#xA;树状数组 Link to heading binary index tree 来自OI-wiki的图，我记得刘汝佳书里也有，不过那本书不在我手边 树状数组的核心是lowbit：x&amp;amp;(-x)，其中-x为x的负数的补码表示形式，计算出来可以得到x的二进制从右往左的第一个1所对应的十进制数字。 这样就可以算出非叶子节点对应的管辖范围&#xA;单点修改，一路上山&#xA;int tree[MAXN]; inline void update(int i, int x) { for (int pos = i; pos &amp;lt; MAXN; pos += lowbit(pos)) tree[pos] += x; } 求前n项和，一路下山&#xA;inline int query(int n) { int ans = 0; for (int pos = n; pos; pos -= lowbit(pos)) ans += tree[pos]; return ans; } 区间查询&#xA;inline int query(int a, int b) { return query(b) - query(a - 1); } 举个例子，查询前6个的和，lowbit(6) =2 ，所以S[6] = c[6]+c[4]，这是比较自然的。 更新的时候，如果要更新6的话，需要更新c[6]和c[8]的值。 唯一的问题就是需要多加理解，二进制表示毕竟不够直观。但是原题目是很简单的。</description>
    </item>
    <item>
      <title>图的存储方式之前向星与邻接表</title>
      <link>http://wtysos11.github.io/posts/20210315_%E5%9B%BE%E7%9A%84%E5%AD%98%E5%82%A8%E6%96%B9%E5%BC%8F%E4%B9%8B%E5%89%8D%E5%90%91%E6%98%9F%E4%B8%8E%E9%82%BB%E6%8E%A5%E8%A1%A8/</link>
      <pubDate>Mon, 15 Mar 2021 08:57:14 +0800</pubDate>
      <guid>http://wtysos11.github.io/posts/20210315_%E5%9B%BE%E7%9A%84%E5%AD%98%E5%82%A8%E6%96%B9%E5%BC%8F%E4%B9%8B%E5%89%8D%E5%90%91%E6%98%9F%E4%B8%8E%E9%82%BB%E6%8E%A5%E8%A1%A8/</guid>
      <description>常用的邻接矩阵和邻接表都挺简单的，就不提了。 这个是ACM版本的前向星，本质就是用数组替换了链表，效果就是更方便一些。 虽然不如十字链表删除方便，但是也能比较方便地写出边删除的操作。&#xA;//前向星 struct graph{ typedef vector&amp;lt;int&amp;gt; VI; VI info,next,to; //假设现在有n个点，m条边,info长度为n，next和to长度为m。 //其中，info保存着所有节点的第一个边 //next保存着所有边信息的下一个边 //to保存着边的下一个节点信息。如果是带权边，可以增加一个weights数组，与to类似。（所有边增加主要加的是to） graph(int n=0,int m=0):to(0),next(0){ info.resize(n); next.reserve(m); to.reserve(m); } int edge_size(){ return to.size();//显然，to即保存了所有边的信息 } int vertex_size(){ return info.size();//info保存了所有节点的信息 } void expand(int i){ if(info.size()&amp;lt;i+1) info.resize(i+1); } void add(int i,int j){//添加一条从i到j的边，有向 expand(i),expand(j); to.push_back(j);//压入新边的信息 next.push_back(info[i]);//新头的下一个指向原来的指针 info[i] = to.size()-1;//链表头指针指向新加项目 } void del_back(){ for(int i=0;i&amp;lt;info.size();i++){ if(info[i] == to.size()-1){ info[i] = next.back(); break; } } to.pop_back(); next.pop_back(); } void clear(){ info.clear(); next.resize(0); to.resize(0); } }; 想了一下还是提一下邻接表吧</description>
    </item>
    <item>
      <title>图的存储方式之前向星与邻接表</title>
      <link>http://wtysos11.github.io/posts/20210315_%E5%9B%BE%E7%9A%84%E5%AD%98%E5%82%A8%E6%96%B9%E5%BC%8F%E4%B9%8B%E5%89%8D%E5%90%91%E6%98%9F%E4%B8%8E%E9%82%BB%E6%8E%A5%E8%A1%A8/</link>
      <pubDate>Mon, 15 Mar 2021 08:57:14 +0800</pubDate>
      <guid>http://wtysos11.github.io/posts/20210315_%E5%9B%BE%E7%9A%84%E5%AD%98%E5%82%A8%E6%96%B9%E5%BC%8F%E4%B9%8B%E5%89%8D%E5%90%91%E6%98%9F%E4%B8%8E%E9%82%BB%E6%8E%A5%E8%A1%A8/</guid>
      <description>常用的邻接矩阵和邻接表都挺简单的，就不提了。 这个是ACM版本的前向星，本质就是用数组替换了链表，效果就是更方便一些。 虽然不如十字链表删除方便，但是也能比较方便地写出边删除的操作。&#xA;//前向星 struct graph{ typedef vector&amp;lt;int&amp;gt; VI; VI info,next,to; //假设现在有n个点，m条边,info长度为n，next和to长度为m。 //其中，info保存着所有节点的第一个边 //next保存着所有边信息的下一个边 //to保存着边的下一个节点信息。如果是带权边，可以增加一个weights数组，与to类似。（所有边增加主要加的是to） graph(int n=0,int m=0):to(0),next(0){ info.resize(n); next.reserve(m); to.reserve(m); } int edge_size(){ return to.size();//显然，to即保存了所有边的信息 } int vertex_size(){ return info.size();//info保存了所有节点的信息 } void expand(int i){ if(info.size()&amp;lt;i+1) info.resize(i+1); } void add(int i,int j){//添加一条从i到j的边，有向 expand(i),expand(j); to.push_back(j);//压入新边的信息 next.push_back(info[i]);//新头的下一个指向原来的指针 info[i] = to.size()-1;//链表头指针指向新加项目 } void del_back(){ for(int i=0;i&amp;lt;info.size();i++){ if(info[i] == to.size()-1){ info[i] = next.back(); break; } } to.pop_back(); next.pop_back(); } void clear(){ info.clear(); next.resize(0); to.resize(0); } }; 想了一下还是提一下邻接表吧</description>
    </item>
    <item>
      <title>图的存储方式之前向星与邻接表</title>
      <link>http://wtysos11.github.io/posts/20210315_%E5%9B%BE%E7%9A%84%E5%AD%98%E5%82%A8%E6%96%B9%E5%BC%8F%E4%B9%8B%E5%89%8D%E5%90%91%E6%98%9F%E4%B8%8E%E9%82%BB%E6%8E%A5%E8%A1%A8/</link>
      <pubDate>Mon, 15 Mar 2021 08:57:14 +0800</pubDate>
      <guid>http://wtysos11.github.io/posts/20210315_%E5%9B%BE%E7%9A%84%E5%AD%98%E5%82%A8%E6%96%B9%E5%BC%8F%E4%B9%8B%E5%89%8D%E5%90%91%E6%98%9F%E4%B8%8E%E9%82%BB%E6%8E%A5%E8%A1%A8/</guid>
      <description>常用的邻接矩阵和邻接表都挺简单的，就不提了。 这个是ACM版本的前向星，本质就是用数组替换了链表，效果就是更方便一些。 虽然不如十字链表删除方便，但是也能比较方便地写出边删除的操作。&#xA;//前向星 struct graph{ typedef vector&amp;lt;int&amp;gt; VI; VI info,next,to; //假设现在有n个点，m条边,info长度为n，next和to长度为m。 //其中，info保存着所有节点的第一个边 //next保存着所有边信息的下一个边 //to保存着边的下一个节点信息。如果是带权边，可以增加一个weights数组，与to类似。（所有边增加主要加的是to） graph(int n=0,int m=0):to(0),next(0){ info.resize(n); next.reserve(m); to.reserve(m); } int edge_size(){ return to.size();//显然，to即保存了所有边的信息 } int vertex_size(){ return info.size();//info保存了所有节点的信息 } void expand(int i){ if(info.size()&amp;lt;i+1) info.resize(i+1); } void add(int i,int j){//添加一条从i到j的边，有向 expand(i),expand(j); to.push_back(j);//压入新边的信息 next.push_back(info[i]);//新头的下一个指向原来的指针 info[i] = to.size()-1;//链表头指针指向新加项目 } void del_back(){ for(int i=0;i&amp;lt;info.size();i++){ if(info[i] == to.size()-1){ info[i] = next.back(); break; } } to.pop_back(); next.pop_back(); } void clear(){ info.clear(); next.resize(0); to.resize(0); } }; 想了一下还是提一下邻接表吧</description>
    </item>
    <item>
      <title>KMP算法复习</title>
      <link>http://wtysos11.github.io/posts/20210311_kmp%E7%AE%97%E6%B3%95%E5%A4%8D%E4%B9%A0/</link>
      <pubDate>Thu, 11 Mar 2021 15:09:14 +0800</pubDate>
      <guid>http://wtysos11.github.io/posts/20210311_kmp%E7%AE%97%E6%B3%95%E5%A4%8D%E4%B9%A0/</guid>
      <description>太久没打了，刚好有道题用上了，就复习一下。 我觉得复到KMP应该就够用了，如果要AC自动机我直接死在那里。&#xA;参考资料 如何更好地理解和掌握 KMP 算法? - 阮行止的回答 - 知乎 https://www.zhihu.com/question/21923021/answer/1032665486&#xA;核心思想 Link to heading KMP算法要解决的问题是字符串匹配问题。给定原串S和模版串P，求解原串中是否存在子字符串与模版串相匹配。&#xA;最简单的想法就是暴力搜索，设原串S长度为n，模板串P长度为m，显然暴力的时间复杂度为O(nm)，非常慢。&#xA;KMP的想法是充分利用适配信息，其next数组的定义如下：next[i]表示在P[0:i]子串中，使前k个字符恰好等于后k个字符的最大的k，且k不能等于i+1（否则就等于它自己了） 这个数组的定义挺绕的，第一眼基本都不会反应过来，我就不插图了，只用文本表述一下（建议看图）。KMP的失配匹配，本质上就是把模版串向前伸，直到伸到前缀与后缀匹配为止，这实际上就是自己与自己匹配。因此这个k就是前缀与后缀相同的最大长度k。&#xA;因此next数组可以用如下方法求得&#xA;def getNxt(x): for i in range(x,0,-1): if p[0:i] == p[x-i+1:x+1]: return i return 0 nxt = [getNxt(x) for x in range(len(p))] 构建next数组的复杂度显然是O(m^2)的 使用next数组加速匹配&#xA;def search(p,s): tar = 0 # 主串中将要匹配的位置 pos = 0 # 子串中将要匹配的位置 while tar &amp;lt; len(s): if s[tar] == p[pos]: # 若两个字符相同，匹配成功，tar和pos各进一步 tar += 1 pos += 1 elif pos&amp;gt;0: # 失配，且pos&amp;gt;0，则next数组移动 pos = nxt[pos-1] else: # pos[0]也失配了，则主串前进 tar += 1 if pos == len(p): # pos走到了len(p)，匹配成功 print(tar-pos) # 输出起始地点 pos = nxt[pos-1] # 当作失配，继续下一次匹配 时间复杂度为O(n+m)，会比暴力方法小很多。</description>
    </item>
    <item>
      <title>KMP算法复习</title>
      <link>http://wtysos11.github.io/posts/20210311_kmp%E7%AE%97%E6%B3%95%E5%A4%8D%E4%B9%A0/</link>
      <pubDate>Thu, 11 Mar 2021 15:09:14 +0800</pubDate>
      <guid>http://wtysos11.github.io/posts/20210311_kmp%E7%AE%97%E6%B3%95%E5%A4%8D%E4%B9%A0/</guid>
      <description>太久没打了，刚好有道题用上了，就复习一下。 我觉得复到KMP应该就够用了，如果要AC自动机我直接死在那里。&#xA;参考资料 如何更好地理解和掌握 KMP 算法? - 阮行止的回答 - 知乎 https://www.zhihu.com/question/21923021/answer/1032665486&#xA;核心思想 Link to heading KMP算法要解决的问题是字符串匹配问题。给定原串S和模版串P，求解原串中是否存在子字符串与模版串相匹配。&#xA;最简单的想法就是暴力搜索，设原串S长度为n，模板串P长度为m，显然暴力的时间复杂度为O(nm)，非常慢。&#xA;KMP的想法是充分利用适配信息，其next数组的定义如下：next[i]表示在P[0:i]子串中，使前k个字符恰好等于后k个字符的最大的k，且k不能等于i+1（否则就等于它自己了） 这个数组的定义挺绕的，第一眼基本都不会反应过来，我就不插图了，只用文本表述一下（建议看图）。KMP的失配匹配，本质上就是把模版串向前伸，直到伸到前缀与后缀匹配为止，这实际上就是自己与自己匹配。因此这个k就是前缀与后缀相同的最大长度k。&#xA;因此next数组可以用如下方法求得&#xA;def getNxt(x): for i in range(x,0,-1): if p[0:i] == p[x-i+1:x+1]: return i return 0 nxt = [getNxt(x) for x in range(len(p))] 构建next数组的复杂度显然是O(m^2)的 使用next数组加速匹配&#xA;def search(p,s): tar = 0 # 主串中将要匹配的位置 pos = 0 # 子串中将要匹配的位置 while tar &amp;lt; len(s): if s[tar] == p[pos]: # 若两个字符相同，匹配成功，tar和pos各进一步 tar += 1 pos += 1 elif pos&amp;gt;0: # 失配，且pos&amp;gt;0，则next数组移动 pos = nxt[pos-1] else: # pos[0]也失配了，则主串前进 tar += 1 if pos == len(p): # pos走到了len(p)，匹配成功 print(tar-pos) # 输出起始地点 pos = nxt[pos-1] # 当作失配，继续下一次匹配 时间复杂度为O(n+m)，会比暴力方法小很多。</description>
    </item>
    <item>
      <title>KMP算法复习</title>
      <link>http://wtysos11.github.io/posts/20210311_kmp%E7%AE%97%E6%B3%95%E5%A4%8D%E4%B9%A0/</link>
      <pubDate>Thu, 11 Mar 2021 15:09:14 +0800</pubDate>
      <guid>http://wtysos11.github.io/posts/20210311_kmp%E7%AE%97%E6%B3%95%E5%A4%8D%E4%B9%A0/</guid>
      <description>太久没打了，刚好有道题用上了，就复习一下。 我觉得复到KMP应该就够用了，如果要AC自动机我直接死在那里。&#xA;参考资料 如何更好地理解和掌握 KMP 算法? - 阮行止的回答 - 知乎 https://www.zhihu.com/question/21923021/answer/1032665486&#xA;核心思想 Link to heading KMP算法要解决的问题是字符串匹配问题。给定原串S和模版串P，求解原串中是否存在子字符串与模版串相匹配。&#xA;最简单的想法就是暴力搜索，设原串S长度为n，模板串P长度为m，显然暴力的时间复杂度为O(nm)，非常慢。&#xA;KMP的想法是充分利用适配信息，其next数组的定义如下：next[i]表示在P[0:i]子串中，使前k个字符恰好等于后k个字符的最大的k，且k不能等于i+1（否则就等于它自己了） 这个数组的定义挺绕的，第一眼基本都不会反应过来，我就不插图了，只用文本表述一下（建议看图）。KMP的失配匹配，本质上就是把模版串向前伸，直到伸到前缀与后缀匹配为止，这实际上就是自己与自己匹配。因此这个k就是前缀与后缀相同的最大长度k。&#xA;因此next数组可以用如下方法求得&#xA;def getNxt(x): for i in range(x,0,-1): if p[0:i] == p[x-i+1:x+1]: return i return 0 nxt = [getNxt(x) for x in range(len(p))] 构建next数组的复杂度显然是O(m^2)的 使用next数组加速匹配&#xA;def search(p,s): tar = 0 # 主串中将要匹配的位置 pos = 0 # 子串中将要匹配的位置 while tar &amp;lt; len(s): if s[tar] == p[pos]: # 若两个字符相同，匹配成功，tar和pos各进一步 tar += 1 pos += 1 elif pos&amp;gt;0: # 失配，且pos&amp;gt;0，则next数组移动 pos = nxt[pos-1] else: # pos[0]也失配了，则主串前进 tar += 1 if pos == len(p): # pos走到了len(p)，匹配成功 print(tar-pos) # 输出起始地点 pos = nxt[pos-1] # 当作失配，继续下一次匹配 时间复杂度为O(n+m)，会比暴力方法小很多。</description>
    </item>
  </channel>
</rss>
