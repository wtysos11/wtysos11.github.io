<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>计算机/算法/动态规划 on 实践出真知</title>
    <link>http://wtysos11.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA/%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</link>
    <description>Recent content in 计算机/算法/动态规划 on 实践出真知</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <atom:link href="http://wtysos11.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA/%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Leetcode 357: 统计各位数字都不同的数字个数</title>
      <link>http://wtysos11.github.io/posts/20220411_leetcode_357/</link>
      <pubDate>Mon, 11 Apr 2022 10:01:02 +0800</pubDate>
      <guid>http://wtysos11.github.io/posts/20220411_leetcode_357/</guid>
      <description> Leetcode 357: 统计各位数字都不同的数字个数 Link to heading 解法包括暴力解法和扩张方法。&#xA;暴力解法 Link to heading 直接对所有的数字求解，约为O(nlogn)，目测必定超时，就不浪费时间了。&#xA;扩张方法 Link to heading 这个想法是错的……不应该从有重复的数字扩张，应该从没有重复的数字扩张。早上起来做这道题脑子有点懵。&#xA;该问题是具备最优子结构的。对于长度为n的问题，与其枚举没有重复的数字，不如枚举重复的数字。 重复源头可以来源于之前（n-1）与当前，因此可以从这个地方开始递推比较最新一位的数字与之前的数字之间的关系。&#xA;可以定义数字dp[n][m]为长度为n的数组中以m开头的数内重复的数字个数。 其中对0的处理比较麻烦，最高位不会出现0，但是0是有可能出现重复的，因此可能需要对之前的一位做专门的处理。 因此特殊的，定义dp[n-1][0]为第n位数为任意非0数时，n-1位为0时的重复数字个数&#xA;显而易见的是，dp[1][&amp;hellip;]=0，长度为一位的时候不会有重复的数据。&#xA;最新的一位数据的内容主要包括两个方面：&#xA;之前已经重复的0：$dp[n-1][0] = 10^{n-3} + \sum_{i\in Q_0}dp[n-2][i]$，包括最新的一个重复，加上之前的重复项目 更新完0之后，更新之前已经重复的1~9：$dp[n][m] = 10^{n-2} + \sum_{i\in Q_m}dp[n-1][i]$。其中$Q_m$表示个位数中除了m以外的集合，比如$Q_1={0,2,3,&amp;hellip;,9}$。 该项目的两个部分分别表示前一位为m或者非m的情况（非0），以1为例子 $10^{n-2}$表示形如&amp;quot;11XXX&amp;quot;的数据，其中之后的数据完全任意且不会重复，因此直接计总数即可。 $\sum_{i\in Q_m}dp[n-1][i]$，表示形如&amp;quot;1XaaXXX&amp;quot;的数据，即最新的数字加入时没有引入重复，但是之前已经发生了重复的情况。 该项也是0为什么要在之前计算的缘故，否则，会漏算因为0引起的重复情况。 在计算的时候是一起计算的，n位以0开头的数字可以视为n+1位存在任意数字使其非0。但是最终计算总重复数字时不会加入dp[n][0]，因为最高位为时非法的。&#xA;以n=3为例子:&#xA;n=1的时候，$dp[1][&amp;hellip;]=0$ n=2的时候，$dp[2][1] = dp[1][1] + 10^0=1$，也即11。类似的，有00、22、33、44、55、66、77、88、99。 n=3的时候，$dp[3][1] = 10^1 + \sum_{i\in{0,2,3,&amp;hellip;,9}}10^0$，即110、111、112、&amp;hellip;、119，以及100、122、133、&amp;hellip;、199。 在最终计入总数的时候，计算$\sum_{i=1}^9dp[n][i]$，不计算0。因为不存在以0开头的数字。 数学方法 Link to heading 官方给的解法：含有d位数($2\geq d\leq 10$)的各位数字都不同的数字x的个数可以由$9\times A_{9}^{d-1}$。（第一位选择范围为除0以外，第二位为10个数字除以第一位，以此类推）&#xA;class Solution { public: int countNumbersWithUniqueDigits(int n) { if (n == 0) { return 1; } if (n == 1) { return 10; } int ans = 10, cur = 9; for (int i = 0; i &amp;lt; n - 1; ++i) { cur *= 9 - i; ans += cur; } return ans; } }; </description>
    </item>
    <item>
      <title>Leetcode 357: 统计各位数字都不同的数字个数</title>
      <link>http://wtysos11.github.io/posts/20220411_leetcode_357/</link>
      <pubDate>Mon, 11 Apr 2022 10:01:02 +0800</pubDate>
      <guid>http://wtysos11.github.io/posts/20220411_leetcode_357/</guid>
      <description> Leetcode 357: 统计各位数字都不同的数字个数 Link to heading 解法包括暴力解法和扩张方法。&#xA;暴力解法 Link to heading 直接对所有的数字求解，约为O(nlogn)，目测必定超时，就不浪费时间了。&#xA;扩张方法 Link to heading 这个想法是错的……不应该从有重复的数字扩张，应该从没有重复的数字扩张。早上起来做这道题脑子有点懵。&#xA;该问题是具备最优子结构的。对于长度为n的问题，与其枚举没有重复的数字，不如枚举重复的数字。 重复源头可以来源于之前（n-1）与当前，因此可以从这个地方开始递推比较最新一位的数字与之前的数字之间的关系。&#xA;可以定义数字dp[n][m]为长度为n的数组中以m开头的数内重复的数字个数。 其中对0的处理比较麻烦，最高位不会出现0，但是0是有可能出现重复的，因此可能需要对之前的一位做专门的处理。 因此特殊的，定义dp[n-1][0]为第n位数为任意非0数时，n-1位为0时的重复数字个数&#xA;显而易见的是，dp[1][&amp;hellip;]=0，长度为一位的时候不会有重复的数据。&#xA;最新的一位数据的内容主要包括两个方面：&#xA;之前已经重复的0：$dp[n-1][0] = 10^{n-3} + \sum_{i\in Q_0}dp[n-2][i]$，包括最新的一个重复，加上之前的重复项目 更新完0之后，更新之前已经重复的1~9：$dp[n][m] = 10^{n-2} + \sum_{i\in Q_m}dp[n-1][i]$。其中$Q_m$表示个位数中除了m以外的集合，比如$Q_1={0,2,3,&amp;hellip;,9}$。 该项目的两个部分分别表示前一位为m或者非m的情况（非0），以1为例子 $10^{n-2}$表示形如&amp;quot;11XXX&amp;quot;的数据，其中之后的数据完全任意且不会重复，因此直接计总数即可。 $\sum_{i\in Q_m}dp[n-1][i]$，表示形如&amp;quot;1XaaXXX&amp;quot;的数据，即最新的数字加入时没有引入重复，但是之前已经发生了重复的情况。 该项也是0为什么要在之前计算的缘故，否则，会漏算因为0引起的重复情况。 在计算的时候是一起计算的，n位以0开头的数字可以视为n+1位存在任意数字使其非0。但是最终计算总重复数字时不会加入dp[n][0]，因为最高位为时非法的。&#xA;以n=3为例子:&#xA;n=1的时候，$dp[1][&amp;hellip;]=0$ n=2的时候，$dp[2][1] = dp[1][1] + 10^0=1$，也即11。类似的，有00、22、33、44、55、66、77、88、99。 n=3的时候，$dp[3][1] = 10^1 + \sum_{i\in{0,2,3,&amp;hellip;,9}}10^0$，即110、111、112、&amp;hellip;、119，以及100、122、133、&amp;hellip;、199。 在最终计入总数的时候，计算$\sum_{i=1}^9dp[n][i]$，不计算0。因为不存在以0开头的数字。 数学方法 Link to heading 官方给的解法：含有d位数($2\geq d\leq 10$)的各位数字都不同的数字x的个数可以由$9\times A_{9}^{d-1}$。（第一位选择范围为除0以外，第二位为10个数字除以第一位，以此类推）&#xA;class Solution { public: int countNumbersWithUniqueDigits(int n) { if (n == 0) { return 1; } if (n == 1) { return 10; } int ans = 10, cur = 9; for (int i = 0; i &amp;lt; n - 1; ++i) { cur *= 9 - i; ans += cur; } return ans; } }; </description>
    </item>
    <item>
      <title>Leetcode 357: 统计各位数字都不同的数字个数</title>
      <link>http://wtysos11.github.io/posts/20220411_leetcode_357/</link>
      <pubDate>Mon, 11 Apr 2022 10:01:02 +0800</pubDate>
      <guid>http://wtysos11.github.io/posts/20220411_leetcode_357/</guid>
      <description> Leetcode 357: 统计各位数字都不同的数字个数 Link to heading 解法包括暴力解法和扩张方法。&#xA;暴力解法 Link to heading 直接对所有的数字求解，约为O(nlogn)，目测必定超时，就不浪费时间了。&#xA;扩张方法 Link to heading 这个想法是错的……不应该从有重复的数字扩张，应该从没有重复的数字扩张。早上起来做这道题脑子有点懵。&#xA;该问题是具备最优子结构的。对于长度为n的问题，与其枚举没有重复的数字，不如枚举重复的数字。 重复源头可以来源于之前（n-1）与当前，因此可以从这个地方开始递推比较最新一位的数字与之前的数字之间的关系。&#xA;可以定义数字dp[n][m]为长度为n的数组中以m开头的数内重复的数字个数。 其中对0的处理比较麻烦，最高位不会出现0，但是0是有可能出现重复的，因此可能需要对之前的一位做专门的处理。 因此特殊的，定义dp[n-1][0]为第n位数为任意非0数时，n-1位为0时的重复数字个数&#xA;显而易见的是，dp[1][&amp;hellip;]=0，长度为一位的时候不会有重复的数据。&#xA;最新的一位数据的内容主要包括两个方面：&#xA;之前已经重复的0：$dp[n-1][0] = 10^{n-3} + \sum_{i\in Q_0}dp[n-2][i]$，包括最新的一个重复，加上之前的重复项目 更新完0之后，更新之前已经重复的1~9：$dp[n][m] = 10^{n-2} + \sum_{i\in Q_m}dp[n-1][i]$。其中$Q_m$表示个位数中除了m以外的集合，比如$Q_1={0,2,3,&amp;hellip;,9}$。 该项目的两个部分分别表示前一位为m或者非m的情况（非0），以1为例子 $10^{n-2}$表示形如&amp;quot;11XXX&amp;quot;的数据，其中之后的数据完全任意且不会重复，因此直接计总数即可。 $\sum_{i\in Q_m}dp[n-1][i]$，表示形如&amp;quot;1XaaXXX&amp;quot;的数据，即最新的数字加入时没有引入重复，但是之前已经发生了重复的情况。 该项也是0为什么要在之前计算的缘故，否则，会漏算因为0引起的重复情况。 在计算的时候是一起计算的，n位以0开头的数字可以视为n+1位存在任意数字使其非0。但是最终计算总重复数字时不会加入dp[n][0]，因为最高位为时非法的。&#xA;以n=3为例子:&#xA;n=1的时候，$dp[1][&amp;hellip;]=0$ n=2的时候，$dp[2][1] = dp[1][1] + 10^0=1$，也即11。类似的，有00、22、33、44、55、66、77、88、99。 n=3的时候，$dp[3][1] = 10^1 + \sum_{i\in{0,2,3,&amp;hellip;,9}}10^0$，即110、111、112、&amp;hellip;、119，以及100、122、133、&amp;hellip;、199。 在最终计入总数的时候，计算$\sum_{i=1}^9dp[n][i]$，不计算0。因为不存在以0开头的数字。 数学方法 Link to heading 官方给的解法：含有d位数($2\geq d\leq 10$)的各位数字都不同的数字x的个数可以由$9\times A_{9}^{d-1}$。（第一位选择范围为除0以外，第二位为10个数字除以第一位，以此类推）&#xA;class Solution { public: int countNumbersWithUniqueDigits(int n) { if (n == 0) { return 1; } if (n == 1) { return 10; } int ans = 10, cur = 9; for (int i = 0; i &amp;lt; n - 1; ++i) { cur *= 9 - i; ans += cur; } return ans; } }; </description>
    </item>
    <item>
      <title>Leetcode 5: 最长回文子串</title>
      <link>http://wtysos11.github.io/posts/20220405_leetcode_5_%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2/</link>
      <pubDate>Tue, 05 Apr 2022 12:09:02 +0800</pubDate>
      <guid>http://wtysos11.github.io/posts/20220405_leetcode_5_%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2/</guid>
      <description>Leetcode第五题：最长回文子串</description>
    </item>
    <item>
      <title>Leetcode 5: 最长回文子串</title>
      <link>http://wtysos11.github.io/posts/20220405_leetcode_5_%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2/</link>
      <pubDate>Tue, 05 Apr 2022 12:09:02 +0800</pubDate>
      <guid>http://wtysos11.github.io/posts/20220405_leetcode_5_%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2/</guid>
      <description>Leetcode第五题：最长回文子串</description>
    </item>
    <item>
      <title>Leetcode 5: 最长回文子串</title>
      <link>http://wtysos11.github.io/posts/20220405_leetcode_5_%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2/</link>
      <pubDate>Tue, 05 Apr 2022 12:09:02 +0800</pubDate>
      <guid>http://wtysos11.github.io/posts/20220405_leetcode_5_%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2/</guid>
      <description>Leetcode第五题：最长回文子串</description>
    </item>
    <item>
      <title>【动态规划】最长公共子串问题</title>
      <link>http://wtysos11.github.io/posts/20210311_%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%AD%90%E4%B8%B2%E9%97%AE%E9%A2%98/</link>
      <pubDate>Thu, 11 Mar 2021 16:40:14 +0800</pubDate>
      <guid>http://wtysos11.github.io/posts/20210311_%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%AD%90%E4%B8%B2%E9%97%AE%E9%A2%98/</guid>
      <description>题目来源为：牛客网&#xA;题目有意思的地方在于，最长公共子串与最长连续公共子串都是比较经典的问题，但是这道题在其基础上加了限制。 首先这道题应该是最长连续公共子串问题，状态转移方程就不写了，挺简单的。就记录下最大的子串所在的位置的行坐标和列坐标，就能把子串拿到手。 但是对于O(nm)的动态规划所有点都会超时，这就很厉害了，目前通过的做法使用的是滑动窗口法，我还在研究。&#xA;代码大概长这样&#xA;/** * 滑动窗口算法 * * @param str1 string字符串 the string * @param str2 string字符串 the string * @return string字符串 */ public static String LCS1(String str1, String str2) { // write code here StringBuilder sb = new StringBuilder(); int start = 0, end = 1; while (end &amp;lt; str1.length() + 1) { if (str2.contains(str1.substring(start, end))) { if (sb.length() &amp;lt; end - start) { sb.delete(0, sb.length()); sb.append(str1, start, end); } } else { //这个算法我曾经疑惑，假如出现start&amp;gt;end，程序不是会crash么 //通过debug发现，当start==end时，substring获取的是&amp;#34;&amp;#34;，此时contains必然为true //所以当start == end时，必然会走end++分支 start++; } end++; } if (sb.</description>
    </item>
    <item>
      <title>【动态规划】最长公共子串问题</title>
      <link>http://wtysos11.github.io/posts/20210311_%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%AD%90%E4%B8%B2%E9%97%AE%E9%A2%98/</link>
      <pubDate>Thu, 11 Mar 2021 16:40:14 +0800</pubDate>
      <guid>http://wtysos11.github.io/posts/20210311_%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%AD%90%E4%B8%B2%E9%97%AE%E9%A2%98/</guid>
      <description>题目来源为：牛客网&#xA;题目有意思的地方在于，最长公共子串与最长连续公共子串都是比较经典的问题，但是这道题在其基础上加了限制。 首先这道题应该是最长连续公共子串问题，状态转移方程就不写了，挺简单的。就记录下最大的子串所在的位置的行坐标和列坐标，就能把子串拿到手。 但是对于O(nm)的动态规划所有点都会超时，这就很厉害了，目前通过的做法使用的是滑动窗口法，我还在研究。&#xA;代码大概长这样&#xA;/** * 滑动窗口算法 * * @param str1 string字符串 the string * @param str2 string字符串 the string * @return string字符串 */ public static String LCS1(String str1, String str2) { // write code here StringBuilder sb = new StringBuilder(); int start = 0, end = 1; while (end &amp;lt; str1.length() + 1) { if (str2.contains(str1.substring(start, end))) { if (sb.length() &amp;lt; end - start) { sb.delete(0, sb.length()); sb.append(str1, start, end); } } else { //这个算法我曾经疑惑，假如出现start&amp;gt;end，程序不是会crash么 //通过debug发现，当start==end时，substring获取的是&amp;#34;&amp;#34;，此时contains必然为true //所以当start == end时，必然会走end++分支 start++; } end++; } if (sb.</description>
    </item>
    <item>
      <title>【动态规划】最长公共子串问题</title>
      <link>http://wtysos11.github.io/posts/20210311_%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%AD%90%E4%B8%B2%E9%97%AE%E9%A2%98/</link>
      <pubDate>Thu, 11 Mar 2021 16:40:14 +0800</pubDate>
      <guid>http://wtysos11.github.io/posts/20210311_%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%AD%90%E4%B8%B2%E9%97%AE%E9%A2%98/</guid>
      <description>题目来源为：牛客网&#xA;题目有意思的地方在于，最长公共子串与最长连续公共子串都是比较经典的问题，但是这道题在其基础上加了限制。 首先这道题应该是最长连续公共子串问题，状态转移方程就不写了，挺简单的。就记录下最大的子串所在的位置的行坐标和列坐标，就能把子串拿到手。 但是对于O(nm)的动态规划所有点都会超时，这就很厉害了，目前通过的做法使用的是滑动窗口法，我还在研究。&#xA;代码大概长这样&#xA;/** * 滑动窗口算法 * * @param str1 string字符串 the string * @param str2 string字符串 the string * @return string字符串 */ public static String LCS1(String str1, String str2) { // write code here StringBuilder sb = new StringBuilder(); int start = 0, end = 1; while (end &amp;lt; str1.length() + 1) { if (str2.contains(str1.substring(start, end))) { if (sb.length() &amp;lt; end - start) { sb.delete(0, sb.length()); sb.append(str1, start, end); } } else { //这个算法我曾经疑惑，假如出现start&amp;gt;end，程序不是会crash么 //通过debug发现，当start==end时，substring获取的是&amp;#34;&amp;#34;，此时contains必然为true //所以当start == end时，必然会走end++分支 start++; } end++; } if (sb.</description>
    </item>
    <item>
      <title>微信面试算法题-最长拼接子序列</title>
      <link>http://wtysos11.github.io/posts/20210310_%E6%9C%80%E9%95%BF%E6%8B%BC%E6%8E%A5%E5%AD%90%E5%BA%8F%E5%88%97/</link>
      <pubDate>Wed, 10 Mar 2021 14:21:14 +0800</pubDate>
      <guid>http://wtysos11.github.io/posts/20210310_%E6%9C%80%E9%95%BF%E6%8B%BC%E6%8E%A5%E5%AD%90%E5%BA%8F%E5%88%97/</guid>
      <description>面的微信部门，应用研发岗实习一面。我人都傻了，我填的不都是java研发之类的，怎么冒出个这么奇怪的岗位。&#xA;题目是这样子的：对于一个给定的子序列，比如说[1,2,3,10,4,2,5,6]，要求去除一段连续的数据，使得剩下的数据是非下降的。输出的结果是去除的最少数字的数量。（可以不唯一）&#xA;比如说对于上面这个序列，显然其去除的可以是10,4,2，也就是输出3。也可以选择去除3,10,4，结果也是相同的。&#xA;这道题是我面试腾讯微信部门的第二道面试题，感谢面试官给了我充足的时间，虽然我还是没有做出来QAQ。&#xA;当时的想法 Link to heading 提到这种上升或下降式的序列，第一个想到的就是最长连续上升子序列之类的题目，就想到用DP来做。然后发现一个很尴尬的问题：状态转移方程建不出来^_^。这个真的是从做DP到现在一直困扰我的梦靥了，那就没办法了。不排除能用DP做，只是我比较菜，有时间专门研究一下吧……&#xA;第二个想法就是观察原序列。显然，被去除掉的结构一定是存在逆序的，就是说索引顺序与值顺序不一致，比如10,4这样。那有一个想法，如果我用递归的思想，不断二分原序列，将其拆解到只剩下两个数字。然后对于小的逆序对，删除掉大的。再对其拼接的过程中不断去除逆序结构，最终应该会剩下多条顺序链。&#xA;但是在如何拼接顺序链以及确认该步骤是正确的地方上卡住了。&#xA;现在的想法 Link to heading 考完出来之后我就有了个新的想法。由于只能切一刀，显然只有三种情况：把前面部分切掉，只保留后面部分；把后面部分切掉，只保留前面部分；以及中间切一刀，保留两边部分。&#xA;无论怎么切，都可以用归纳法证明，剩下的一定是一条连续非下降子序列。所以问题转变为：求解以头开始或者以尾结束的最长连续子序列的长度，然后尝试把它们拼接起来。&#xA;算法正确性证明我忘了，好久没干了，不过感觉这个靠谱多了。</description>
    </item>
    <item>
      <title>微信面试算法题-最长拼接子序列</title>
      <link>http://wtysos11.github.io/posts/20210310_%E6%9C%80%E9%95%BF%E6%8B%BC%E6%8E%A5%E5%AD%90%E5%BA%8F%E5%88%97/</link>
      <pubDate>Wed, 10 Mar 2021 14:21:14 +0800</pubDate>
      <guid>http://wtysos11.github.io/posts/20210310_%E6%9C%80%E9%95%BF%E6%8B%BC%E6%8E%A5%E5%AD%90%E5%BA%8F%E5%88%97/</guid>
      <description>面的微信部门，应用研发岗实习一面。我人都傻了，我填的不都是java研发之类的，怎么冒出个这么奇怪的岗位。&#xA;题目是这样子的：对于一个给定的子序列，比如说[1,2,3,10,4,2,5,6]，要求去除一段连续的数据，使得剩下的数据是非下降的。输出的结果是去除的最少数字的数量。（可以不唯一）&#xA;比如说对于上面这个序列，显然其去除的可以是10,4,2，也就是输出3。也可以选择去除3,10,4，结果也是相同的。&#xA;这道题是我面试腾讯微信部门的第二道面试题，感谢面试官给了我充足的时间，虽然我还是没有做出来QAQ。&#xA;当时的想法 Link to heading 提到这种上升或下降式的序列，第一个想到的就是最长连续上升子序列之类的题目，就想到用DP来做。然后发现一个很尴尬的问题：状态转移方程建不出来^_^。这个真的是从做DP到现在一直困扰我的梦靥了，那就没办法了。不排除能用DP做，只是我比较菜，有时间专门研究一下吧……&#xA;第二个想法就是观察原序列。显然，被去除掉的结构一定是存在逆序的，就是说索引顺序与值顺序不一致，比如10,4这样。那有一个想法，如果我用递归的思想，不断二分原序列，将其拆解到只剩下两个数字。然后对于小的逆序对，删除掉大的。再对其拼接的过程中不断去除逆序结构，最终应该会剩下多条顺序链。&#xA;但是在如何拼接顺序链以及确认该步骤是正确的地方上卡住了。&#xA;现在的想法 Link to heading 考完出来之后我就有了个新的想法。由于只能切一刀，显然只有三种情况：把前面部分切掉，只保留后面部分；把后面部分切掉，只保留前面部分；以及中间切一刀，保留两边部分。&#xA;无论怎么切，都可以用归纳法证明，剩下的一定是一条连续非下降子序列。所以问题转变为：求解以头开始或者以尾结束的最长连续子序列的长度，然后尝试把它们拼接起来。&#xA;算法正确性证明我忘了，好久没干了，不过感觉这个靠谱多了。</description>
    </item>
    <item>
      <title>微信面试算法题-最长拼接子序列</title>
      <link>http://wtysos11.github.io/posts/20210310_%E6%9C%80%E9%95%BF%E6%8B%BC%E6%8E%A5%E5%AD%90%E5%BA%8F%E5%88%97/</link>
      <pubDate>Wed, 10 Mar 2021 14:21:14 +0800</pubDate>
      <guid>http://wtysos11.github.io/posts/20210310_%E6%9C%80%E9%95%BF%E6%8B%BC%E6%8E%A5%E5%AD%90%E5%BA%8F%E5%88%97/</guid>
      <description>面的微信部门，应用研发岗实习一面。我人都傻了，我填的不都是java研发之类的，怎么冒出个这么奇怪的岗位。&#xA;题目是这样子的：对于一个给定的子序列，比如说[1,2,3,10,4,2,5,6]，要求去除一段连续的数据，使得剩下的数据是非下降的。输出的结果是去除的最少数字的数量。（可以不唯一）&#xA;比如说对于上面这个序列，显然其去除的可以是10,4,2，也就是输出3。也可以选择去除3,10,4，结果也是相同的。&#xA;这道题是我面试腾讯微信部门的第二道面试题，感谢面试官给了我充足的时间，虽然我还是没有做出来QAQ。&#xA;当时的想法 Link to heading 提到这种上升或下降式的序列，第一个想到的就是最长连续上升子序列之类的题目，就想到用DP来做。然后发现一个很尴尬的问题：状态转移方程建不出来^_^。这个真的是从做DP到现在一直困扰我的梦靥了，那就没办法了。不排除能用DP做，只是我比较菜，有时间专门研究一下吧……&#xA;第二个想法就是观察原序列。显然，被去除掉的结构一定是存在逆序的，就是说索引顺序与值顺序不一致，比如10,4这样。那有一个想法，如果我用递归的思想，不断二分原序列，将其拆解到只剩下两个数字。然后对于小的逆序对，删除掉大的。再对其拼接的过程中不断去除逆序结构，最终应该会剩下多条顺序链。&#xA;但是在如何拼接顺序链以及确认该步骤是正确的地方上卡住了。&#xA;现在的想法 Link to heading 考完出来之后我就有了个新的想法。由于只能切一刀，显然只有三种情况：把前面部分切掉，只保留后面部分；把后面部分切掉，只保留前面部分；以及中间切一刀，保留两边部分。&#xA;无论怎么切，都可以用归纳法证明，剩下的一定是一条连续非下降子序列。所以问题转变为：求解以头开始或者以尾结束的最长连续子序列的长度，然后尝试把它们拼接起来。&#xA;算法正确性证明我忘了，好久没干了，不过感觉这个靠谱多了。</description>
    </item>
  </channel>
</rss>
