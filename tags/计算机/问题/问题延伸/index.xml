<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>计算机/问题/问题延伸 on 实践出真知</title>
    <link>http://wtysos11.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA/%E9%97%AE%E9%A2%98/%E9%97%AE%E9%A2%98%E5%BB%B6%E4%BC%B8/</link>
    <description>Recent content in 计算机/问题/问题延伸 on 实践出真知</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <atom:link href="http://wtysos11.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA/%E9%97%AE%E9%A2%98/%E9%97%AE%E9%A2%98%E5%BB%B6%E4%BC%B8/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>关于golang中指针赋值的问题</title>
      <link>http://wtysos11.github.io/posts/20210715_%E5%85%B3%E4%BA%8Egolang%E4%B8%AD%E6%8C%87%E9%92%88%E8%B5%8B%E5%80%BC%E7%9A%84%E9%97%AE%E9%A2%98/</link>
      <pubDate>Thu, 15 Jul 2021 18:08:14 +0800</pubDate>
      <guid>http://wtysos11.github.io/posts/20210715_%E5%85%B3%E4%BA%8Egolang%E4%B8%AD%E6%8C%87%E9%92%88%E8%B5%8B%E5%80%BC%E7%9A%84%E9%97%AE%E9%A2%98/</guid>
      <description>最近在SO上找到了一个很有意思的问题：SO&#xA;这个问题是关于一个指针在外部函数的赋值，当然，解决方法也很简单。&#xA;type userIP net.IP func main() { var u *userIP u.defaultIP() fmt.Printf(&amp;#34;%v\n&amp;#34;, u) } func (u *userIP) defaultIP() { defaultIP := userIP(&amp;#34;127.0.0.1&amp;#34;) u = &amp;amp;defaultIP } 但是为什么会这样？如果是学过C风格指针的话应该会发现这条语句是很奇怪的，从语法上讲u中存放的地址会被改变，但是实际上它并不会改变（PS：原来的这个代码需要修改一下，不然会有dereference nil的错误）&#xA;修改后的例子 Link to heading package main import ( &amp;#34;fmt&amp;#34; &amp;#34;net&amp;#34; ) type userIP net.IP func main() { s:= userIP(&amp;#34;123.2.2.1&amp;#34;) var u *userIP = &amp;amp;s fmt.Printf(&amp;#34;address of s %p\n&amp;#34;,&amp;amp;s) fmt.Printf(&amp;#34;what&amp;#39;s in u? u = %p, &amp;amp;u = %p\n&amp;#34;,u,&amp;amp;u) fmt.Println(&amp;#34;In main function&amp;#34;) fmt.Printf(&amp;#34;main(): address of pointer is %v, address inside pointer is %p\n&amp;#34;, &amp;amp;u,u) fmt.</description>
    </item>
    <item>
      <title>关于golang中指针赋值的问题</title>
      <link>http://wtysos11.github.io/posts/20210715_%E5%85%B3%E4%BA%8Egolang%E4%B8%AD%E6%8C%87%E9%92%88%E8%B5%8B%E5%80%BC%E7%9A%84%E9%97%AE%E9%A2%98/</link>
      <pubDate>Thu, 15 Jul 2021 18:08:14 +0800</pubDate>
      <guid>http://wtysos11.github.io/posts/20210715_%E5%85%B3%E4%BA%8Egolang%E4%B8%AD%E6%8C%87%E9%92%88%E8%B5%8B%E5%80%BC%E7%9A%84%E9%97%AE%E9%A2%98/</guid>
      <description>最近在SO上找到了一个很有意思的问题：SO&#xA;这个问题是关于一个指针在外部函数的赋值，当然，解决方法也很简单。&#xA;type userIP net.IP func main() { var u *userIP u.defaultIP() fmt.Printf(&amp;#34;%v\n&amp;#34;, u) } func (u *userIP) defaultIP() { defaultIP := userIP(&amp;#34;127.0.0.1&amp;#34;) u = &amp;amp;defaultIP } 但是为什么会这样？如果是学过C风格指针的话应该会发现这条语句是很奇怪的，从语法上讲u中存放的地址会被改变，但是实际上它并不会改变（PS：原来的这个代码需要修改一下，不然会有dereference nil的错误）&#xA;修改后的例子 Link to heading package main import ( &amp;#34;fmt&amp;#34; &amp;#34;net&amp;#34; ) type userIP net.IP func main() { s:= userIP(&amp;#34;123.2.2.1&amp;#34;) var u *userIP = &amp;amp;s fmt.Printf(&amp;#34;address of s %p\n&amp;#34;,&amp;amp;s) fmt.Printf(&amp;#34;what&amp;#39;s in u? u = %p, &amp;amp;u = %p\n&amp;#34;,u,&amp;amp;u) fmt.Println(&amp;#34;In main function&amp;#34;) fmt.Printf(&amp;#34;main(): address of pointer is %v, address inside pointer is %p\n&amp;#34;, &amp;amp;u,u) fmt.</description>
    </item>
    <item>
      <title>关于golang中指针赋值的问题</title>
      <link>http://wtysos11.github.io/posts/20210715_%E5%85%B3%E4%BA%8Egolang%E4%B8%AD%E6%8C%87%E9%92%88%E8%B5%8B%E5%80%BC%E7%9A%84%E9%97%AE%E9%A2%98/</link>
      <pubDate>Thu, 15 Jul 2021 18:08:14 +0800</pubDate>
      <guid>http://wtysos11.github.io/posts/20210715_%E5%85%B3%E4%BA%8Egolang%E4%B8%AD%E6%8C%87%E9%92%88%E8%B5%8B%E5%80%BC%E7%9A%84%E9%97%AE%E9%A2%98/</guid>
      <description>最近在SO上找到了一个很有意思的问题：SO&#xA;这个问题是关于一个指针在外部函数的赋值，当然，解决方法也很简单。&#xA;type userIP net.IP func main() { var u *userIP u.defaultIP() fmt.Printf(&amp;#34;%v\n&amp;#34;, u) } func (u *userIP) defaultIP() { defaultIP := userIP(&amp;#34;127.0.0.1&amp;#34;) u = &amp;amp;defaultIP } 但是为什么会这样？如果是学过C风格指针的话应该会发现这条语句是很奇怪的，从语法上讲u中存放的地址会被改变，但是实际上它并不会改变（PS：原来的这个代码需要修改一下，不然会有dereference nil的错误）&#xA;修改后的例子 Link to heading package main import ( &amp;#34;fmt&amp;#34; &amp;#34;net&amp;#34; ) type userIP net.IP func main() { s:= userIP(&amp;#34;123.2.2.1&amp;#34;) var u *userIP = &amp;amp;s fmt.Printf(&amp;#34;address of s %p\n&amp;#34;,&amp;amp;s) fmt.Printf(&amp;#34;what&amp;#39;s in u? u = %p, &amp;amp;u = %p\n&amp;#34;,u,&amp;amp;u) fmt.Println(&amp;#34;In main function&amp;#34;) fmt.Printf(&amp;#34;main(): address of pointer is %v, address inside pointer is %p\n&amp;#34;, &amp;amp;u,u) fmt.</description>
    </item>
  </channel>
</rss>
